#!/bin/bash
# PostgreSQL setup script for Bitnami compatibility

# Source required libraries
. /opt/bitnami/scripts/libfs.sh
. /opt/bitnami/scripts/liblog.sh
. /opt/bitnami/scripts/postgresql-env.sh
. /opt/bitnami/scripts/libpostgresql.sh

# Function to setup PostgreSQL directories
postgresql_setup_directories() {
    info "Setting up PostgreSQL directories"
    
    # Ensure all required directories exist
    ensure_dir_exists "$POSTGRESQL_DATA_DIR"
    ensure_dir_exists "$POSTGRESQL_CONF_DIR"
    ensure_dir_exists "$POSTGRESQL_LOG_DIR"
    ensure_dir_exists "$POSTGRESQL_TMP_DIR"
    ensure_dir_exists "$POSTGRESQL_SECRETS_DIR"
    ensure_dir_exists "$POSTGRESQL_CERTS_DIR"
    
    # Set proper ownership
    ensure_user_has_write_permissions "bitnami" "$POSTGRESQL_VOLUME_DIR"
    ensure_user_has_write_permissions "bitnami" "$POSTGRESQL_DATA_DIR"
    ensure_user_has_write_permissions "bitnami" "$POSTGRESQL_LOG_DIR"
    ensure_user_has_write_permissions "bitnami" "$POSTGRESQL_TMP_DIR"
    ensure_user_has_write_permissions "bitnami" "/var/run/postgresql"
}

# Function to validate PostgreSQL configuration
postgresql_validate_config() {
    info "Validating PostgreSQL configuration"
    
    # Check required environment variables
    if [[ -z "$POSTGRESQL_PASSWORD" ]] && [[ -z "$ALLOW_EMPTY_PASSWORD" ]]; then
        error "PostgreSQL password is required. Set POSTGRES_PASSWORD or ALLOW_EMPTY_PASSWORD=true"
        exit 1
    fi
    
    # Set default values
    export POSTGRESQL_USERNAME="${POSTGRESQL_USERNAME:-postgres}"
    export POSTGRESQL_DATABASE="${POSTGRESQL_DATABASE:-}"
    
    # Use postgres password for admin operations if not set
    if [[ -z "$POSTGRESQL_POSTGRES_PASSWORD" ]]; then
        export POSTGRESQL_POSTGRES_PASSWORD="$POSTGRESQL_PASSWORD"
    fi
}

# Function to setup PostgreSQL configuration files
postgresql_setup_config_files() {
    info "Setting up PostgreSQL configuration files"
    
    # Create basic postgresql.conf if it doesn't exist
    local config_file="$POSTGRESQL_CONF_DIR/postgresql.conf"
    if [[ ! -f "$config_file" ]]; then
        cat > "$config_file" << EOF
# PostgreSQL configuration file
# Generated by Bitnami PostgreSQL image

# Connection settings
listen_addresses = '*'
port = $POSTGRESQL_PORT_NUMBER
unix_socket_directories = '$POSTGRESQL_TMP_DIR'

# Memory settings
shared_buffers = 128MB
effective_cache_size = 4GB

# Write-ahead logging
wal_level = replica
max_wal_size = 1GB
min_wal_size = 80MB

# Replication settings
max_wal_senders = 10
wal_keep_segments = 64

# Logging settings
logging_collector = on
log_directory = '$POSTGRESQL_LOG_DIR'
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
log_statement = 'all'
log_min_duration_statement = 1000

# Other settings
hot_standby = on
EOF
    fi
    
    # Link to data directory
    if [[ ! -f "$POSTGRESQL_DATA_DIR/postgresql.conf" ]]; then
        ln -sf "$config_file" "$POSTGRESQL_DATA_DIR/postgresql.conf"
    fi
}

# Main setup function
postgresql_setup() {
    info "Starting PostgreSQL setup"
    
    postgresql_setup_directories
    postgresql_validate_config
    postgresql_setup_config_files
    
    info "PostgreSQL setup completed"
}

# Run setup if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    postgresql_setup
fi